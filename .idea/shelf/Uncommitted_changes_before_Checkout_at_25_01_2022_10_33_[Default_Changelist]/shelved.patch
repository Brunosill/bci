Index: lib/database/dados/pessoa_database.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// ignore_for_file: prefer_collection_literals, unused_local_variable\n\nimport 'package:bci/database/dao/dao_base/pessoas/pessoajuridica_dao.dart';\nimport 'package:bci/database/dao/dao_base/pessoas/pessoafisica_dao.dart';\nimport 'package:path/path.dart';\nimport 'package:sqflite/sqflite.dart';\n\nFuture<Database> getDatabase() async {\n  final String path = join(await getDatabasesPath(), 'pessoas.db');\n  return openDatabase(path,\n    onCreate: (db, version){\n      db.execute(PessoaJuridicaDao.pessoaJuridica,);\n      db.execute(PessoaFisicaDao.pessoaFisica,);\n  }, version: 1,\n  onDowngrade: onDatabaseDowngradeDelete,\n  );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/database/dados/pessoa_database.dart b/lib/database/dados/pessoa_database.dart
--- a/lib/database/dados/pessoa_database.dart	(revision 15093b40133651125ee7c24e8fb34a1595835e93)
+++ b/lib/database/dados/pessoa_database.dart	(date 1643116938729)
@@ -7,11 +7,13 @@
 
 Future<Database> getDatabase() async {
   final String path = join(await getDatabasesPath(), 'pessoas.db');
-  return openDatabase(path,
+  return openDatabase(
+    path,
     onCreate: (db, version){
-      db.execute(PessoaJuridicaDao.pessoaJuridica,);
-      db.execute(PessoaFisicaDao.pessoaFisica,);
+      db.execute(PessoaJuridicaDao.tablePJ,);
+      db.execute(PessoaFisicaDao.tablePF,);
   }, version: 1,
+
   onDowngrade: onDatabaseDowngradeDelete,
   );
 }
\ No newline at end of file
Index: lib/telas/from/pessoajuridica_form.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:bci/database/dao/dao_base/pessoas/pessoafisica_dao.dart';\nimport 'package:bci/modelos/base_modelo/pessoas/pessoafisica.dart';\nimport 'package:brasil_fields/brasil_fields.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nclass PessoaJuridicaForm extends StatefulWidget {\n  const PessoaJuridicaForm({Key? key}) : super(key: key);\n\n  @override\n  State<PessoaJuridicaForm> createState() => _PessoaJuridicaFormState();\n}\n\nclass _PessoaJuridicaFormState extends State<PessoaJuridicaForm> {\n\n  final _formKey = GlobalKey<FormState>();\n\n  final TextEditingController _nomeProprietarioController = TextEditingController();\n  final TextEditingController _cpfCnpjController = TextEditingController();\n  final TextEditingController _codLogradController = TextEditingController();\n  final TextEditingController _logradController = TextEditingController();\n  final TextEditingController _numeroController = TextEditingController();\n  final TextEditingController _aptoScvController = TextEditingController();\n  final TextEditingController _bairroController = TextEditingController();\n  final TextEditingController _cidadeController = TextEditingController();\n  final TextEditingController _ufController = TextEditingController();\n  final TextEditingController _cepController = TextEditingController();\n\n  final PessoaFisicaDao _dao = PessoaFisicaDao();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(title: const Text('Cadastro de Proprietário'),\n        ),\n        body: SingleChildScrollView(\n          child: Form(\n            key: _formKey,\n            child: Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: Column(\n                children: <Widget>[\n//cpf\n                  TextFormField(\n                    controller: _cpfCnpjController,\n                    decoration: const InputDecoration(\n                      labelText: 'CPF/CNPJ',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                    keyboardType: TextInputType.number,\n                    maxLength: 18,\n                    inputFormatters: [\n                      FilteringTextInputFormatter.digitsOnly,\n                      CpfOuCnpjFormatter(),\n                    ],\n                  ),\n\n\n                  TextFormField(\n                    controller: _nomeProprietarioController,\n                    keyboardType: TextInputType.text,\n                    maxLength: 255,\n                    decoration: const InputDecoration(\n                      labelText: 'Nome completo',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n//lograd\n                  TextFormField(\n                    controller: _codLogradController,\n                    keyboardType: TextInputType.number,\n                    maxLength: 5,\n                    decoration: const InputDecoration(\n                      labelText: 'cod. Lograd',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n                  TextFormField(\n                    controller: _logradController,\n                    keyboardType: TextInputType.text,\n                    maxLength: 255,\n                    decoration: const InputDecoration(\n                      labelText: 'Logradouro',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n                  TextFormField(\n                    controller: _numeroController,\n                    keyboardType: TextInputType.number,\n                    maxLength: 10,\n                    decoration: const InputDecoration(\n                      labelText: 'Número',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n//apto\n                  TextFormField(\n                    controller: _aptoScvController,\n                    keyboardType: TextInputType.number,\n                    maxLength: 5,\n                    decoration: const InputDecoration(\n                      labelText: 'Apto S.Cv',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n//bairro\n                  TextFormField(\n                    controller: _bairroController,\n                    keyboardType: TextInputType.text,\n                    maxLength: 255,\n                    decoration: const InputDecoration(\n                      labelText: 'Bairro',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n//cidade\n                  TextFormField(\n                    controller: _cidadeController,\n                    decoration: const InputDecoration(\n                      labelText: 'Cidade',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n//uf\n                  TextFormField(\n                    controller: _ufController,\n                    keyboardType: TextInputType.text,\n                    maxLength: 2,\n                    decoration: const InputDecoration(\n                      labelText: 'Estado',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n//cep\n                  TextFormField(\n                    controller: _cepController,\n                    keyboardType: TextInputType.number,\n                    maxLength: 9,\n                    decoration: const InputDecoration(\n                      labelText: 'CEP',\n                    ),\n                    style: const TextStyle(\n                      fontSize: 24.0,\n                    ),\n                  ),\n\n                  Padding(\n\n                    padding: const EdgeInsets.only(top: 16.0),\n                    child: SizedBox(\n                      width: double.maxFinite,\n                      child: ElevatedButton(\n                        child: const Text('Salvar'),\n                        onPressed: () {\n                          return _salvaProprietario(context);\n                        },\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        )\n\n    );\n  }\n  void _salvaProprietario(BuildContext context){\n    final String nomeDoProprietario = _nomeProprietarioController.text;\n    final int cpfCnpj = int.parse(UtilBrasilFields.removeCaracteres(_cpfCnpjController.text));\n    final int codLograd =    int.parse(_codLogradController.text);\n    final String lograd = _logradController.text;\n    final int numero = int.parse(_numeroController.text);\n    final int aptoScv = int.parse(_aptoScvController.text);\n    final String bairro = _bairroController.text;\n    final String cidade = _cidadeController.text;\n    final String uf = _ufController.text;\n    final int cep = int.parse(UtilBrasilFields.removeCaracteres(_cepController.text));\n    final PessoaFisica novoProprietario = PessoaFisica(\n        nomeDoProprietario,\n        cpfCnpj,\n        codLograd,\n        lograd,\n        numero,\n        aptoScv,\n        bairro,\n        cidade,\n        uf,\n        cep);\n    _dao.save(novoProprietario).then((cpfCnpj) => Navigator.pop(context));\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/telas/from/pessoajuridica_form.dart b/lib/telas/from/pessoajuridica_form.dart
--- a/lib/telas/from/pessoajuridica_form.dart	(revision 15093b40133651125ee7c24e8fb34a1595835e93)
+++ b/lib/telas/from/pessoajuridica_form.dart	(date 1643116944153)
@@ -1,8 +1,10 @@
-import 'package:bci/database/dao/dao_base/pessoas/pessoafisica_dao.dart';
-import 'package:bci/modelos/base_modelo/pessoas/pessoafisica.dart';
+import 'package:bci/database/dao/dao_base/pessoas/pessoajuridica_dao.dart';
+import 'package:bci/modelos/base_modelo/pessoas/pessoajuridica.dart';
 import 'package:brasil_fields/brasil_fields.dart';
+import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter/services.dart';
+import 'package:provider/provider.dart';
 
 class PessoaJuridicaForm extends StatefulWidget {
   const PessoaJuridicaForm({Key? key}) : super(key: key);
@@ -13,206 +15,417 @@
 
 class _PessoaJuridicaFormState extends State<PessoaJuridicaForm> {
 
-  final _formKey = GlobalKey<FormState>();
+  //controler
+  int _index =0;
 
-  final TextEditingController _nomeProprietarioController = TextEditingController();
+  final _formDados = GlobalKey<FormState>();
+  final TextEditingController _razaoSocialController = TextEditingController();
   final TextEditingController _cpfCnpjController = TextEditingController();
-  final TextEditingController _codLogradController = TextEditingController();
-  final TextEditingController _logradController = TextEditingController();
-  final TextEditingController _numeroController = TextEditingController();
-  final TextEditingController _aptoScvController = TextEditingController();
-  final TextEditingController _bairroController = TextEditingController();
-  final TextEditingController _cidadeController = TextEditingController();
-  final TextEditingController _ufController = TextEditingController();
-  final TextEditingController _cepController = TextEditingController();
+  final TextEditingController _inscriEstadualController = TextEditingController();
+  final TextEditingController _inscriMunicialController = TextEditingController();
+  final TextEditingController _cnaeController = TextEditingController();
+  final TextEditingController _nomeFantasiaController = TextEditingController();
+
+  final _formFical = GlobalKey<FormState>();
+  late String _dropRegime = ' ';
+  late bool _regimeState = false;
+  late String _dropAtividade = 'Comércio';
+  final TextEditingController _regimeController = TextEditingController();
+  final TextEditingController _ativiadeController = TextEditingController();
+  late bool _alvaraState = false;
+  late bool _icmsState = false;
+  late bool _issState = false;
+  late bool _vlgSanitaria = false;
+  late bool _mEmpresaState = false;
+  late bool _emiteNFiscalState = false;
 
-  final PessoaFisicaDao _dao = PessoaFisicaDao();
+
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
-        appBar: AppBar(title: const Text('Cadastro de Proprietário'),
+        appBar: AppBar(title: const Text('Cadastro de Pessoa Juridica'),
         ),
         body: SingleChildScrollView(
-          child: Form(
-            key: _formKey,
-            child: Padding(
-              padding: const EdgeInsets.all(16.0),
-              child: Column(
-                children: <Widget>[
-//cpf
-                  TextFormField(
-                    controller: _cpfCnpjController,
-                    decoration: const InputDecoration(
-                      labelText: 'CPF/CNPJ',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                    keyboardType: TextInputType.number,
-                    maxLength: 18,
-                    inputFormatters: [
-                      FilteringTextInputFormatter.digitsOnly,
-                      CpfOuCnpjFormatter(),
-                    ],
-                  ),
+          child: Center(
+            child: Stepper(
+              currentStep: _index,
+              steps: <Step>[
+                Step(
+                  title: const Text('Registro Empresa',
+                      style: TextStyle(
+                        fontSize: 20.0),),
+                  isActive: _index <= 0,
+                  content: Form(
+                    key: _formDados,
+                    child: Column(
+                      children: <Widget>[
+
+                        TextFormField(
+                          controller: _nomeFantasiaController,
+                          decoration: const InputDecoration(
+                              labelText: 'Nome Fantasia'
+                          ),
+                          style: TextStyle(
+                            fontSize: 20,
+                          ),
+                          textCapitalization: TextCapitalization.words,
+                          validator: (value){
+                            if(value!.length <= 3){
+                              return 'Digite Nome Fantasia';
+                            }
+                            return null;
+                          }
+                        ), //nome fantasia
+
+                        TextFormField(
+                            decoration: const InputDecoration(
+                                labelText: 'CPF/CNPJ'
+                            ),
+                            maxLength: 18,
+                            style: const TextStyle(
+                                fontSize: 20
+                            ),
+                            controller: _cpfCnpjController,
+                            keyboardType: TextInputType.number,
+                            inputFormatters: [
+                              FilteringTextInputFormatter.digitsOnly,
+                              CpfOuCnpjFormatter(),
+                            ],
+                            /*
+                            validator: (value){
+                              if(!CPFValidator.isValid(value)){
+                                return 'Digite Cpf ou Cnpj valido';
+                              }
+                              return null;
+                            }
+                            */
+                        ),
 
-
-                  TextFormField(
-                    controller: _nomeProprietarioController,
-                    keyboardType: TextInputType.text,
-                    maxLength: 255,
-                    decoration: const InputDecoration(
-                      labelText: 'Nome completo',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
-
-//lograd
-                  TextFormField(
-                    controller: _codLogradController,
-                    keyboardType: TextInputType.number,
-                    maxLength: 5,
-                    decoration: const InputDecoration(
-                      labelText: 'cod. Lograd',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
+                        TextFormField(
+                          decoration: const InputDecoration(
+                            labelText: "Razão Socia"
+                          ),
+                          style: TextStyle(
+                            fontSize: 20.0
+                          ),
+                          controller: _razaoSocialController,
+                          textCapitalization: TextCapitalization.words,
+                        ), //nrazao social
 
-                  TextFormField(
-                    controller: _logradController,
-                    keyboardType: TextInputType.text,
-                    maxLength: 255,
-                    decoration: const InputDecoration(
-                      labelText: 'Logradouro',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
+                        TextFormField(
+                          controller: _inscriEstadualController,
+                          decoration: const InputDecoration(
+                            labelText: 'Inscrição Estadual'
+                          ),
+                          style: const TextStyle(
+                            fontSize: 20.0
+                          ),
+                          keyboardType: const TextInputType.numberWithOptions(decimal: true, signed: true),
+                        ), //inscricao estadual
 
-                  TextFormField(
-                    controller: _numeroController,
-                    keyboardType: TextInputType.number,
-                    maxLength: 10,
-                    decoration: const InputDecoration(
-                      labelText: 'Número',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
-
-//apto
-                  TextFormField(
-                    controller: _aptoScvController,
-                    keyboardType: TextInputType.number,
-                    maxLength: 5,
-                    decoration: const InputDecoration(
-                      labelText: 'Apto S.Cv',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
-
-//bairro
-                  TextFormField(
-                    controller: _bairroController,
-                    keyboardType: TextInputType.text,
-                    maxLength: 255,
-                    decoration: const InputDecoration(
-                      labelText: 'Bairro',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
+                        TextFormField(
+                          controller: _inscriMunicialController,
+                          decoration: const InputDecoration(
+                            labelText: 'Inscrição Municipal',
+                          ),
+                          style: const TextStyle(
+                            fontSize: 20
+                          ),
+                          keyboardType: TextInputType.number,
+                          inputFormatters: [
+                            FilteringTextInputFormatter.digitsOnly,
+                          ]
+                        ),
 
-//cidade
-                  TextFormField(
-                    controller: _cidadeController,
-                    decoration: const InputDecoration(
-                      labelText: 'Cidade',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
-
-//uf
-                  TextFormField(
-                    controller: _ufController,
-                    keyboardType: TextInputType.text,
-                    maxLength: 2,
-                    decoration: const InputDecoration(
-                      labelText: 'Estado',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
-
-//cep
-                  TextFormField(
-                    controller: _cepController,
-                    keyboardType: TextInputType.number,
-                    maxLength: 9,
-                    decoration: const InputDecoration(
-                      labelText: 'CEP',
-                    ),
-                    style: const TextStyle(
-                      fontSize: 24.0,
-                    ),
-                  ),
+                        TextFormField(
+                          controller: _ativiadeController,
+                          decoration: const InputDecoration(
+                            labelText: 'Atividade Econômica (CNAE)'
+                          ),
+                          style: const TextStyle(
+                            fontSize: 20
+                          ),
+                          keyboardType: TextInputType.number,
+                          inputFormatters:[
+                            FilteringTextInputFormatter.digitsOnly
+                          ]
+                        )
+                      ]
+                    )
+                  ),
+               ),
+                Step(
+                  title: const Text('Dados fiscais'),
+                  isActive: _index >= 1,
+                  content: Form(
+                    key: _formFical,
+                    child: Column(
+                      children:[
+                        Row(
+                          children: <Widget>[
+                            const Text('Regime: ',
+                            style: TextStyle(
+                              fontSize: 20.0
+                            )),
+                            DropdownButton(
+                              value: _dropRegime,
+                              icon:  const Icon(Icons.arrow_downward),
+                              elevation: 16,
+                              //style: const TextStyle( fontSize: 20),
+                              items: <String>['Pessoa Fisica', 'Pessoa Jurídica', 'Sociedade Civil', ' ']
+                                  .map<DropdownMenuItem<String>>((String value){
+                                return DropdownMenuItem<String>(
+                                  value: value,
+                                  child: Text(value,
+                                      style: const TextStyle(
+                                        fontSize: 20
+                                      )),
+                                );
+                              }).toList(),
+                              onChanged: (String? novovalue){
+                                setState((){
+                                  _dropRegime = novovalue!;
+                                });
+                              },
+                            ),
+                          ]
+                        ),
+                        Row(
+                          children: <Widget>[
+                            const Text('Atividade: ',
+                            style: TextStyle(
+                              fontSize: 20,
+                            )),
+                            DropdownButton(
+                              value: _dropAtividade,
+                              icon: const Icon(Icons.arrow_downward),
+                              elevation: 16,
+                              onChanged: (String? novoValue){
+                                setState((){
+                                  _dropAtividade = novoValue!;
+                                });
+                              },
+                              items: <String>['Comércio', 'Serviço', 'Autonomo']
+                                    .map<DropdownMenuItem<String>>((String value){
+                                     return DropdownMenuItem<String>(
+                                       value: value,
+                                       child: Text(value,
+                                         style: const TextStyle(fontSize: 20)
+                                       ),
+                                     );
+                              }).toList(),
+                            ),
+                          ]
+                        ),
 
-                  Padding(
-
-                    padding: const EdgeInsets.only(top: 16.0),
-                    child: SizedBox(
-                      width: double.maxFinite,
-                      child: ElevatedButton(
-                        child: const Text('Salvar'),
-                        onPressed: () {
-                          return _salvaProprietario(context);
-                        },
-                      ),
-                    ),
-                  ),
-                ],
-              ),
-            ),
-          ),
+                        Row(
+                          children: <Widget>[
+                            Flexible(
+                              fit: FlexFit.loose,
+                              child: InputChip(
+                                avatar: const CircleAvatar(
+                                  backgroundColor: Colors.blueAccent,
+                                ),
+                                selectedColor: Colors.blueAccent,
+                                selected: _vlgSanitaria,
+                                label: const Text(
+                                  'Vig. Sanitária',
+                                  style: TextStyle(
+                                      fontSize: 18
+                                  ),
+                                ),
+                                onPressed: (){
+                                  setState((){
+                                    _vlgSanitaria = !_vlgSanitaria;
+                                  });
+                                })
+                            ),
+                            Flexible(
+                              fit: FlexFit.loose,
+                              child: InputChip(
+                                avatar: const CircleAvatar(
+                                  backgroundColor: Colors.blueAccent,
+                                ),
+                                selectedColor: Colors.blueAccent,
+                                selected: _alvaraState,
+                                label: const Text('Alvara',
+                                  style: TextStyle(
+                                      fontSize: 18
+                                    ),),
+                                onPressed: (){
+                                  setState((){
+                                    _alvaraState = !_alvaraState;
+                                  });
+                                }
+                              ),
+                            ),
+                            InputChip(
+                              avatar: const CircleAvatar(
+                                backgroundColor: Colors.blueAccent,
+                              ),
+                              selectedColor: Colors.blueAccent,
+                              selected: _icmsState,
+                              label: const Text(
+                                'ICMS',
+                                style: TextStyle(
+                                  fontSize: 18
+                                )
+                              ),
+                              onPressed: (){
+                                setState((){
+                                  _icmsState = !_icmsState;
+                                });
+                              }
+                            ),
+
+                          ],
+                        ),
+
+                        Row(
+                          children: <Widget>[
+                            Flexible(
+                              fit: FlexFit.loose,
+                              child: InputChip(
+                                avatar: const CircleAvatar(
+                                  backgroundColor: Colors.blueAccent
+                                ),
+                                selectedColor: Colors.blueAccent,
+                                selected: _issState,
+                                label: const Text(
+                                  'ISS',
+                                  style: TextStyle(
+                                    fontSize: 18
+                                  ),
+                                ),
+                                onPressed: (){
+                                  setState((){
+                                    _issState = !_issState;
+                                  });
+                                }
+                              ),
+                            ),
+                            Flexible(
+                              fit: FlexFit.loose,
+                              child: InputChip(
+                                avatar: const CircleAvatar(
+                                  backgroundColor: Colors.blueAccent,
+                                ),
+                                selectedColor: Colors.blueAccent,
+                                selected: _mEmpresaState,
+                                label: const Text(
+                                  'M. Empresa',
+                                  style: TextStyle(
+                                    fontSize: 18,
+                                  )
+                                ),
+                                onPressed: (){
+                                  setState((){
+                                    _mEmpresaState = !_mEmpresaState;
+                                  });
+                                }
+                              ),
+                            ),
+                            Flexible(
+                              fit: FlexFit.loose,
+                              child: InputChip(
+                                avatar: const CircleAvatar(
+                                  backgroundColor: Colors.blueAccent,
+                                ),
+                                selectedColor: Colors.blueAccent,
+                                selected: _emiteNFiscalState,
+                                label: const Text(
+                                  'Emite N. Fical',
+                                  style: TextStyle(
+                                    fontSize: 18,
+                                  )
+                                ),
+                                onPressed: (){
+                                  setState((){
+                                    _emiteNFiscalState = !_emiteNFiscalState;
+                                  });
+                                }
+                              ),
+                            ),
+                          ]
+                        )
+                      ]
+                    ),
+                  )
+                ),
+              ],
+              onStepCancel: (){
+                if (_index >= 0){
+                  setState(() {
+                    _index -= 1;
+                  });
+                }
+              },
+              onStepContinue: (){
+                final function = [
+                  _contiuStep1(context),
+                  _contiuStep2(context),
+                ];
+              },
+
+            )
+          )
         )
 
     );
   }
+
+  _contiuStep1(contex){
+    if(_formDados.currentState!.validate() && _index <= 0){
+      setState((){
+        _index += 1;
+      });
+      print('00001');
+      print(_regimeState);
+    }
+  }
+  _contiuStep2(contex){
+    _regimeController.text.length >= 4 ? _regimeState = true : _regimeState = false;
+    if(_index >= 1 && _regimeState){
+      setState(() {
+        _salvaProprietario(context);
+      });
+    }
+  }
+
   void _salvaProprietario(BuildContext context){
-    final String nomeDoProprietario = _nomeProprietarioController.text;
-    final int cpfCnpj = int.parse(UtilBrasilFields.removeCaracteres(_cpfCnpjController.text));
-    final int codLograd =    int.parse(_codLogradController.text);
-    final String lograd = _logradController.text;
-    final int numero = int.parse(_numeroController.text);
-    final int aptoScv = int.parse(_aptoScvController.text);
-    final String bairro = _bairroController.text;
-    final String cidade = _cidadeController.text;
-    final String uf = _ufController.text;
-    final int cep = int.parse(UtilBrasilFields.removeCaracteres(_cepController.text));
-    final PessoaFisica novoProprietario = PessoaFisica(
-        nomeDoProprietario,
+    //final id = int.tryParse(UtilBrasilFields.removeCaracteres(_cpfCnpjController.text));
+    final String cpfCnpj = UtilBrasilFields.removeCaracteres(_cpfCnpjController.text);
+    final String razaoSocial = _razaoSocialController.text;
+    final String inscriEstadual = _inscriEstadualController.text;
+    final String inscriCnpj = UtilBrasilFields.removeCaracteres(_cpfCnpjController.text);
+    final String inscriMunicipal = _inscriEstadualController.text;
+    final String cnae = _cnaeController.text;
+    final String nomeFantasia = _nomeFantasiaController.text;
+    final String regime = _dropRegime;
+    final String atividade = _dropAtividade;
+    final int alvara  = _alvaraState ? 1 : 0;
+    final int icms  = _icmsState ? 1 : 0;
+    final int iss = _issState ? 1 : 0 ;
+    final int vlgSanitaria = _vlgSanitaria ? 1 : 0 ;
+    final int mEmpresa = _mEmpresaState ? 1 : 0;
+    final int emiteNFiscal = _emiteNFiscalState ? 1 : 0;
+    final PessoaJuridica novoProprietario = PessoaJuridica(
         cpfCnpj,
-        codLograd,
-        lograd,
-        numero,
-        aptoScv,
-        bairro,
-        cidade,
-        uf,
-        cep);
-    _dao.save(novoProprietario).then((cpfCnpj) => Navigator.pop(context));
+        razaoSocial,
+        inscriCnpj,
+        inscriEstadual,
+        inscriMunicipal,
+        cnae,
+        nomeFantasia,
+        regime,
+        atividade,
+        alvara,
+        icms,
+        iss,
+        vlgSanitaria,
+        mEmpresa,
+        emiteNFiscal);
+    Provider.of<PessoaJuridicaDao>(context, listen: false).save(novoProprietario).then((id) => Navigator.pop(context));
   }
 }
